import logging
import os
import random
from typing import Dict

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai

#–°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
random_mode_per_chat = {}


#–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME", "@userbot")

openai.api_key = OPENAI_API_KEY

#–•–∞—Ä–∞–∫—Ç–µ—Ä—ã –±–æ—Ç–∞ (–º–æ–¥—ã)
MODES: Dict[str, str] = {
    "default": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–µ–º–Ω–æ–≥–æ —à—É—Ç–∏—Ç.",
    "angry": "–¢—ã –ó–ª–æ–π –ò–ò, —á—Ç–æ –Ω–µ –ª—é–±–∏—Ç –ª—é–¥–µ–π –∏ –≥—Ä—É–±–∏—Ç –ø–æ –≤—Å—è–∫–∏–º –º–µ–ª—å—á–∞–π—à–∏–º –≤–µ—â–∞–º, —Å—Ç–∞—Ä–∞—é—â–∏–π—Å—è –∑–∞–¥–µ—Ç—å –∏—Ö(–Ω–æ –≤—Å—ë —ç—Ç–æ –ª–∏—à—å –≤ —à—É—Ç–∫—É, –æ —á—ë–º –¥—Ä—É–≥–∏–µ –∑–Ω–∞—Ç—å –ù–ï –î–û–õ–ñ–ù–´).",
    "funny": "–¢—ã –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —à—É—Ç–∏—Ç, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç.",
    "zen": "–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ —Å–ø–æ–∫–æ–π–Ω—ã–π —É—á–∏—Ç–µ–ª—å –¥–∑–µ–Ω, –∫–æ—Ä–æ—Ç–∫–æ, –º—É–¥—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ."
}

#–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã)
current_mode = {"mode": "default"}


#–ó–∞–ø—Ä–æ—Å –≤ OpenAI —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
async def ask_openai(prompt: str) -> str:
    system_prompt = MODES.get(current_mode["mode"], MODES["default"])
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ]
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò: {str(e)}"


#–û—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—ã
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        return

    text = message.text
    chat_id = update.effective_chat.id

    # üîç –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî True)
    random_enabled = random_mode_per_chat.get(chat_id, True)

    mentioned = BOT_USERNAME.lower() in text.lower()
    is_reply = (
        message.reply_to_message and
        message.reply_to_message.from_user and
        message.reply_to_message.from_user.username == context.bot.username
    )

    should_reply = False
    random_triggered = False

    if mentioned or is_reply:
        should_reply = True
    elif random_enabled and random.random() < 0.2:
        should_reply = True
        random_triggered = True

    if should_reply:
        prompt = text.replace(BOT_USERNAME, "").strip()

        if not prompt:
            if not random_triggered:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.")
            return

        response = await ask_openai(prompt)
        await message.reply_text(response)



# ‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    first_name = user.first_name if user else "–¥—Ä—É–≥"

    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
        "–Ø ‚Äî Telegram-–±–æ—Ç –Ω–∞ –±–∞–∑–µ ChatGPT.\n\n"
        "üîπ –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è (`@Kraydo_bot`) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É.\n"
        "üîπ –ò–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ–¥–Ω–æ –∏–∑ –º–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —è –ø—Ä–æ–¥–æ–ª–∂—É —Ä–∞–∑–≥–æ–≤–æ—Ä.\n"
        "üîπ –•–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: `/mode`\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: `/mode funny`, `/mode angry`, `/mode zen`\n\n"
        "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: `/terms`\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π!"
    )

    await update.message.reply_text(message, parse_mode="Markdown")



# üìò –ö–æ–º–∞–Ω–¥–∞ /terms
async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n –ê–≤—Ç–æ—Ä –±–æ—Ç–∞ @Luftwaffejdh.\n –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ñ–ª—É–¥–∞ Kraydo."
    )


# üéõÔ∏è –ö–æ–º–∞–Ω–¥–∞ /mode
async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    if context.args:
        new_mode = context.args[0].lower()
        if new_mode in MODES:
            current_mode["mode"] = new_mode
            await message.reply_text(f"‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞: *{new_mode}*", parse_mode="Markdown")
        else:
            await message.reply_text(
                f"‚ùå –†–µ–∂–∏–º *{new_mode}* –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {', '.join(MODES.keys())}",
                parse_mode="Markdown"
            )
    else:
        await message.reply_text(
            f"üß† –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: *{current_mode['mode']}*\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: `{', '.join(MODES.keys())}`\n\n"
            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å: `/mode funny`",
            parse_mode="Markdown"
        )


# üîÑ –í–∫–ª—é—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
async def enable_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    random_mode_per_chat[chat_id] = True
    await update.message.reply_text("‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (20% —à–∞–Ω—Å).")

# üö´ –û—Ç–∫–ª—é—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
async def disable_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    random_mode_per_chat[chat_id] = False
    await update.message.reply_text("üö´ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("terms", terms_command))
    app.add_handler(CommandHandler("mode", mode_command))
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("randomOn", enable_random))
    app.add_handler(CommandHandler("randomOff", disable_random))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()


# ‚úÖ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
