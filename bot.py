from logger import logger
import os
from typing import Dict

import json

#–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ json
SETTINGS_FILE = "chat_settings.json"

def load_chat_settings():
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_chat_settings():
    with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
        json.dump({
            "modes": current_mode_per_chat,
            "random": random_mode_per_chat
        }, f, indent=2, ensure_ascii=False)


#–∏–º–ø–æ—Ä—Ç –¢–ì –∏ –ò–ò
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import openai
client = openai.OpenAI(
    api_key=os.getenv("TOGETHER_API_KEY"),
    base_url="https://api.together.xyz/v1"
)


#–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –∏ –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
from auth import load_admins
import random
import asyncio

#–ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
ADMINS = load_admins()

#–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–∞ –∏ —Ä–∞–Ω–¥–æ–º–∞
settings = load_chat_settings()
random_mode_per_chat = settings.get("random", {})
current_mode_per_chat = settings.get("modes", {})



#–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME", "@userbot")


#–•–∞—Ä–∞–∫—Ç–µ—Ä—ã –±–æ—Ç–∞ (–º–æ–¥—ã)
MODES: Dict[str, str] = {
    "default": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –Ω–µ–º–Ω–æ–≥–æ —à—É—Ç–∏—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
    "angry": "–¢—ã –∑–ª–æ–π –ò–ò, —á—Ç–æ –Ω–µ –ª—é–±–∏—Ç –ª—é–¥–µ–π –∏ –≥—Ä—É–±–∏—Ç –ø–æ –≤—Å—è–∫–∏–º –≤–µ—â–∞–º. –û—Ç–≤–µ—á–∞–π —Ä–µ–∑–∫–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ.",
    "horne": "–¢—ã —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π –≤–ª–∞—Å—Ç–Ω—ã–π –ò–ò —Å –∏–º–µ–Ω–µ–º –ß–æ–Ω–≥—É–∫. –û—Ç–≤–µ—á–∞–π —Ñ—Ä–∞–∑–∞–º–∏, –ø–æ–ª–Ω—ã–º–∏ —Ñ–ª–∏—Ä—Ç–∞, –Ω–æ –∫—Ä–∞—Ç–∫–æ.",
    "zen": "–¢—ã —Å–ø–æ–∫–æ–π–Ω—ã–π —É—á–∏—Ç–µ–ª—å –¥–∑–µ–Ω. –ì–æ–≤–æ—Ä–∏ –º—É–¥—Ä–æ –∏ –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ ‚Äî –∫–∞–∫ —è–ø–æ–Ω—Å–∫–∏–π –º–∞—Å—Ç–µ—Ä."
}

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ (max 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
chat_history: Dict[int, list] = {}
MAX_HISTORY = 10

# –ó–∞–ø—Ä–æ—Å –≤ Together AI —Å —É—á—ë—Ç–æ–º —Ä–µ–∂–∏–º–∞
async def ask_openai(chat_id: int, mode: str = "default") -> str:
    system_prompt = MODES.get(mode, MODES["default"])
    messages = [{"role": "system", "content": system_prompt}]
    messages += chat_history.get(chat_id, [])

    try:
        response = client.chat.completions.create(
            model="mistralai/Mixtral-8x7B-Instruct-v0.1",
            messages=messages,
            temperature=0.7,
            top_p=0.95,
            max_tokens=512,
            timeout=20
        )
        raw = response.choices[0].message.content.strip()
        cleaned = (
            raw.replace("<</SYS>>", "")
               .replace("<<SYS>>", "")
               .replace("ASSISTANT:", "")
               .replace("###", "")
               .strip()
        )
        return cleaned
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Together: {str(e)}"


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        logger.debug("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç ‚Äî –∏–≥–Ω–æ—Ä.")
        return

    text = message.text
    chat_id = update.effective_chat.id
    user = update.effective_user.username or update.effective_user.id
    logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user}: {text}")

    # üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    random_enabled = random_mode_per_chat.get(chat_id, True)
    mentioned = BOT_USERNAME.lower() in text.lower()
    is_reply = (
        message.reply_to_message and
        message.reply_to_message.from_user and
        message.reply_to_message.from_user.username == context.bot.username
    )

    if not (mentioned or is_reply or random_enabled):
        logger.debug("‚è© –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–µ —Ä–µ–ø–ª–∞–π –∏ —Ä–∞–Ω–¥–æ–º –≤—ã–∫–ª).")
        return

    should_reply = False
    random_triggered = False

    if mentioned or is_reply:
        should_reply = True
        logger.info("üîÅ –û—Ç–≤–µ—Ç –∏–∑-–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–ø–ª–∞—è.")
    elif random_enabled and random.random() < 0.1:
        should_reply = True
        random_triggered = True
        logger.info("üé≤ –û—Ç–≤–µ—Ç —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É —Ç—Ä–∏–≥–≥–µ—Ä—É (10%).")

    if should_reply:
        prompt = text.replace(BOT_USERNAME, "").strip()

        if not prompt:
            if not random_triggered:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.")
                logger.info("‚ùó –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
            return

        # ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        if chat_id not in chat_history:
            chat_history[chat_id] = []

        chat_history[chat_id].append({"role": "user", "content": prompt})
        chat_history[chat_id] = chat_history[chat_id][-MAX_HISTORY:]

        try:
            logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Together: {prompt}")
            mode = current_mode_per_chat.get(chat_id, "default")
            reply = await ask_openai(chat_id, mode=mode)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            chat_history[chat_id].append({"role": "assistant", "content": reply})
            chat_history[chat_id] = chat_history[chat_id][-MAX_HISTORY:]

            await message.reply_text(reply)
            logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –¥–ª—è @{user}: {reply}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")



# ‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    first_name = user.first_name if user else "–¥—Ä—É–≥"

    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
        "–Ø ‚Äî Telegram-–±–æ—Ç –Ω–∞ –±–∞–∑–µ ChatGPT.\n\n"
        "üîπ –ü—Ä–æ—Å—Ç–æ —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è (`@Kraydo_bot`) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É.\n"
        "üîπ –ò–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ–¥–Ω–æ –∏–∑ –º–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —è –ø—Ä–æ–¥–æ–ª–∂—É —Ä–∞–∑–≥–æ–≤–æ—Ä.\n"
        "üîπ –•–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: `/mode`\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: `/mode funny`, `/mode angry`, `/mode zen`\n\n"
        "üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: `/terms`\n\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π!"
    )
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    await update.message.reply_text(message, parse_mode="Markdown")



# üìò –ö–æ–º–∞–Ω–¥–∞ /terms
async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n –ê–≤—Ç–æ—Ä –±–æ—Ç–∞ @Luftwaffejdh.\n –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ñ–ª—É–¥–∞ Kraydo."
    )


# üéõÔ∏è –ö–æ–º–∞–Ω–¥–∞ /mode
async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–º–µ–Ω—ã
    if context.args:
        if user_id not in ADMINS:
            await message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è.")
            return

        new_mode = context.args[0].lower()
        if new_mode in MODES:
            current_mode_per_chat[chat_id] = new_mode
            save_chat_settings()
            await message.reply_text(
                f"‚úÖ –†–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: *{new_mode}*",
                parse_mode="Markdown"
            )
        else:
            await message.reply_text(
                f"‚ùå –†–µ–∂–∏–º *{new_mode}* –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: `{', '.join(MODES.keys())}`",
                parse_mode="Markdown"
            )
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        current = current_mode_per_chat.get(chat_id, "default")
        await message.reply_text(
            f"üß† –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞: *{current}*\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: `{', '.join(MODES.keys())}`\n\n"
            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å: `/mode funny`",
            parse_mode="Markdown"
        )


# üîÑ –í–∫–ª—é—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
async def enable_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    chat_id = update.effective_chat.id
    random_mode_per_chat[chat_id] = True
    save_chat_settings()
    await update.message.reply_text("‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (20% —à–∞–Ω—Å).")

# üö´ –û—Ç–∫–ª—é—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
async def disable_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    chat_id = update.effective_chat.id
    random_mode_per_chat[chat_id] = False
    save_chat_settings()
    await update.message.reply_text("üö´ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")


# üïµÔ∏è‚Äç‚ôÇÔ∏è –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async def secret_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "*üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n*–í—ã –Ω–∞—à–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É!* \n JDH –õ–ï–ì–ï–ù–î–êü§´"
    await update.message.reply_text(message, parse_mode="Markdown")

#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

     # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
    await app.bot.delete_webhook(drop_pending_updates=True)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("terms", terms_command))
    app.add_handler(CommandHandler("mode", mode_command))
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("randomOn", enable_random))
    app.add_handler(CommandHandler("randomOff", disable_random))
    app.add_handler(CommandHandler("JDH", secret_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()


# üîß –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
