# core/handlers.py

import random
import re
from telegram import Update
from telegram.ext import ContextTypes
from core.modes import MODES
from config import BOT_USERNAME, MAX_HISTORY, ADMINS
from core.ai import ask_openai
from utils.history import chat_history, current_mode_per_chat, random_mode_per_chat
from utils.logger import logger
from utils.validator import is_valid_message
from db.database import save_chat_setting

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏–ª–∏ —É–ø–æ–º—è–Ω–∏ –º–µ–Ω—è –≤ —á–∞—Ç–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /terms
async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí° –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –Ω–µ –≤–≤–æ–¥–∏—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –û—Ç–≤–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ò–ò.")

# –ö–æ–º–∞–Ω–¥–∞ /mode
async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if context.args:
        if user_id not in ADMINS:
            await message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è.")
            return

        new_mode = context.args[0].lower()
        if new_mode in MODES:
            current_mode_per_chat[chat_id] = new_mode
            chat_history[chat_id] = []  # ‚¨ÖÔ∏è –û–ß–ò–°–¢–ö–ê –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
            await save_chat_setting(chat_id)
            await message.reply_text(
                f"‚úÖ –†–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: *{new_mode}*\n"
                f"üßπ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.",
                parse_mode="Markdown"
            )
        else:
            await message.reply_text(
                f"‚ùå –†–µ–∂–∏–º *{new_mode}* –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: `{', '.join(MODES.keys())}`",
                parse_mode="Markdown"
            )
    else:
        current = current_mode_per_chat.get(chat_id, "default")
        await message.reply_text(
            f"üß† –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞: *{current}*\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: `{', '.join(MODES.keys())}`\n\n"
            f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å: `/mode —Ä–µ–∂–∏–º`",
            parse_mode="Markdown"
        )

# –ö–æ–º–∞–Ω–¥—ã /randomOn –∏ /randomOff
async def enable_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    random_mode_per_chat[chat_id] = True
    await save_chat_setting(chat_id)
    await update.message.reply_text("‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def disable_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    random_mode_per_chat[chat_id] = False
    await save_chat_setting(chat_id)
    await update.message.reply_text("‚ùå –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# –ü–∞—Å—Ö–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
async def secret_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîí –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –Ω–∞—à—ë–ª –ø–∞—Å—Ö–∞–ª–∫—É üëÄ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not is_valid_message(message.text):
        logger.debug("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç ‚Äî –∏–≥–Ω–æ—Ä.")
        return

    text = message.text.strip()
    chat_id = update.effective_chat.id
    user = update.effective_user.username or update.effective_user.id
    logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user}: {text}")

    random_enabled = random_mode_per_chat.get(chat_id, True)
    mentioned = BOT_USERNAME.lower() in text.lower()
    is_reply = (
        message.reply_to_message
        and message.reply_to_message.from_user
        and message.reply_to_message.from_user.id == context.bot.id
    )

    if not (mentioned or is_reply or random_enabled):
        logger.debug("‚è© –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–Ω–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–µ —Ä–µ–ø–ª–∞–π –∏ —Ä–∞–Ω–¥–æ–º –≤—ã–∫–ª).")
        return

    should_reply = False
    random_triggered = False

    if mentioned or is_reply:
        should_reply = True
        logger.info("üîÅ –û—Ç–≤–µ—Ç –∏–∑-–∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–ø–ª–∞—è.")
    elif random_enabled and random.random() < 0.1:
        should_reply = True
        random_triggered = True
        logger.info("üé≤ –û—Ç–≤–µ—Ç —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ —Å–ª—É—á–∞–π–Ω–æ–º—É —Ç—Ä–∏–≥–≥–µ—Ä—É (10%).")

    if should_reply:
        prompt = text.replace(BOT_USERNAME, "").strip()

        if not prompt:
            if not random_triggered:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.")
                logger.info("‚ùó –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.")
            return

        if chat_id not in chat_history:
            chat_history[chat_id] = []

        # üëá –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
        name = None
        if update.effective_chat.type in ("group", "supergroup"):
            name = update.effective_user.first_name or update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        logger.debug(f"–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é: role=user, name={name}, content={repr(prompt)}")
        chat_history[chat_id].append({
            "role": "user",
            "content": prompt,
            **({"name": name} if name else {})
        })
        chat_history[chat_id] = chat_history[chat_id][-MAX_HISTORY:]

        # üîΩ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤
        MAX_WORDS_PER_MESSAGE = 150
        MAX_TOTAL_WORDS = 1500

        def total_words(messages):
            return sum(len(m.get("content", "").split()) for m in messages)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –æ–±—ä—ë–º–Ω–∞—è
        while chat_history[chat_id] and (
            any(len(m.get("content", "").split()) > MAX_WORDS_PER_MESSAGE for m in chat_history[chat_id])
            or total_words(chat_history[chat_id]) > MAX_TOTAL_WORDS
        ):
            removed = chat_history[chat_id].pop(0)
            logger.debug(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã: {removed}")

        try:
            logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Together: {prompt}")
            mode = current_mode_per_chat.get(chat_id, "default")
            logger.info(f"üß† –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: {mode} -> {MODES.get(mode, '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω')}")
            reply = await ask_openai(chat_id, mode=mode)

            reply = clean_ai_reply(reply)

            if not reply or len(reply) > 1000:
                logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç –ò–ò –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.")
                await message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å.")
                return

            # ‚õî –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –æ—Ç–≤–µ—Ç –ò–ò
            chat_history[chat_id].append({
                "role": "assistant",
                "content": reply
            })
            chat_history[chat_id] = chat_history[chat_id][-MAX_HISTORY:]
            logger.debug("‚úÖ –û—Ç–≤–µ—Ç –ò–ò –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")
            await message.reply_text(reply)
            logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –¥–ª—è @{user}: {reply}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")

# –§–∏–ª—å—Ç—Ä-–æ—á–∏—Å—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
def clean_ai_reply(reply: str) -> str:
    stop_phrases = [
        r"^\s*(–ò–ò|user|assistant|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å):",
        r"—Å–µ–π—á–∞—Å –º–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å",
        r"–≤–æ—Ç –ø—Ä–∏–º–µ—Ä",
        r"–ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞",
        r"–∫–æ–¥:",
        r"1\.\s",
    ]

    lines = reply.splitlines()
    cleaned = []

    for line in lines:
        if any(re.search(p, line.strip(), re.IGNORECASE) for p in stop_phrases):
            break
        cleaned.append(line)

    return "\n".join(cleaned).strip()
